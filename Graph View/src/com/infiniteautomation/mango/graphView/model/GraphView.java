/*
 * This file is generated by jOOQ.
 */
package com.infiniteautomation.mango.graphView.model;


import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GraphView extends TableImpl<GraphViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>graphView</code>
     */
    public static final GraphView GRAPH_VIEW = new GraphView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GraphViewRecord> getRecordType() {
        return GraphViewRecord.class;
    }

    /**
     * The column <code>graphView.id</code>.
     */
    public final TableField<GraphViewRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>graphView.xid</code>.
     */
    public final TableField<GraphViewRecord, String> xid = createField(DSL.name("xid"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>graphView.name</code>.
     */
    public final TableField<GraphViewRecord, String> name = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>graphView.context</code>.
     */
    public final TableField<GraphViewRecord, String> context = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    private GraphView(Name alias, Table<GraphViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private GraphView(Name alias, Table<GraphViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>graphView</code> table reference
     */
    public GraphView(String alias) {
        this(DSL.name(alias), GRAPH_VIEW);
    }

    /**
     * Create an aliased <code>graphView</code> table reference
     */
    public GraphView(Name alias) {
        this(alias, GRAPH_VIEW);
    }

    /**
     * Create a <code>graphView</code> table reference
     */
    public GraphView() {
        this(DSL.name("graphView"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<GraphViewRecord, Integer> getIdentity() {
        return (Identity<GraphViewRecord, Integer>) super.getIdentity();
    }

    @Override
    public GraphView as(String alias) {
        return new GraphView(DSL.name(alias), this);
    }

    @Override
    public GraphView as(Name alias) {
        return new GraphView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GraphView rename(String name) {
        return new GraphView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GraphView rename(Name name) {
        return new GraphView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
