/*
 * This file is generated by jOOQ.
 */
package com.infiniteautomation.mango.pointList.model;


import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PointList extends TableImpl<PointListRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pointList</code>
     */
    public static final PointList POINT_LIST = new PointList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PointListRecord> getRecordType() {
        return PointListRecord.class;
    }

    /**
     * The column <code>pointList.id</code>.
     */
    public final TableField<PointListRecord, Integer> id = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>pointList.xid</code>.
     */
    public final TableField<PointListRecord, String> xid = createField(DSL.name("xid"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>pointList.name</code>.
     */
    public final TableField<PointListRecord, String> name = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>pointList.context</code>.
     */
    public final TableField<PointListRecord, String> context = createField(DSL.name("context"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pointList.readPermissionId</code>.
     */
    public final TableField<PointListRecord, Integer> readPermissionId = createField(DSL.name("readPermissionId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pointList.editPermissionId</code>.
     */
    public final TableField<PointListRecord, Integer> editPermissionId = createField(DSL.name("editPermissionId"), SQLDataType.INTEGER.nullable(false), this, "");

    private PointList(Name alias, Table<PointListRecord> aliased) {
        this(alias, aliased, null);
    }

    private PointList(Name alias, Table<PointListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pointList</code> table reference
     */
    public PointList(String alias) {
        this(DSL.name(alias), POINT_LIST);
    }

    /**
     * Create an aliased <code>pointList</code> table reference
     */
    public PointList(Name alias) {
        this(alias, POINT_LIST);
    }

    /**
     * Create a <code>pointList</code> table reference
     */
    public PointList() {
        this(DSL.name("pointList"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PointListRecord, Integer> getIdentity() {
        return (Identity<PointListRecord, Integer>) super.getIdentity();
    }

    @Override
    public PointList as(String alias) {
        return new PointList(DSL.name(alias), this);
    }

    @Override
    public PointList as(Name alias) {
        return new PointList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PointList rename(String name) {
        return new PointList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PointList rename(Name name) {
        return new PointList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, Integer, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
